#!/bin/sh
# (c) 2015, The MITRE Corporation. All rights reserved.
# Source code distributed pursuant to license agreement.
#
# Usage: script/bootstrap
# This script is designed to install all of the necessary dependencies for a
# CRITs install, walk through some basic setup, and help you start a quick
# instance of CRITs.

#=====================Message Colors=========================
FAIL=$(tput setaf 1) #red
PASS=$(tput setaf 2) #green
HEAD=$(tput setaf 5) #magenta
INFO=$(tput setaf 6) #cyan
END=$(tput sgr0)   #ends color
#============================================================

verify()
{
    printf "${INFO}Testing Computer's Architecture${END}\n"
    ARCH=$(uname -m | sed 's/x86_//;s/amd//;s/i[3-6]86/32/')
    if [ "$ARCH" -ne '64' ];
    then
        printf "${FAIL}Non 64-bit system detected${END}\n"
        exit
    else
        printf "${PASS}Architecure 64-bit Passed${END}\n"
    fi
    printf "${INFO}Testing the distro type${END}\n"
    # Using lsb-release because os-release not available on Ubuntu 10.04
    if [ -f /etc/redhat-release ];
    then
        OS=$(cat /etc/redhat-release | sed 's/ [Enterprise|release].*//')
        VER=$(cat /etc/redhat-release | sed 's/.*release //;s/ .*$//')
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    else
        OS=$(uname -s)
        VER=$(uname -r)
    fi
    OS="$(echo "$OS" | tr "[:upper:]" "[:lower:]")"
    VER="$(echo "$VER" | tr "[:upper:]" "[:lower:]")"
}

install_mongo()
{
    # Check if Mongo is Installed
    if [ ! -f /usr/local/bin/mongod ];
    then
        printf "${INFO}Installing MongoDB${END}\n"
        curl http://downloads.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz > mongodb-linux-x86_64-2.6.4.tgz
        tar -zxvf mongodb-linux-x86_64-2.6.4.tgz
        sudo cp ./mongodb-linux-x86_64-2.6.4/bin/* /usr/local/bin/
        rm  mongodb-linux-x86_64-2.6.4.tgz
        rm -r mongodb-linux-x86_64-2.6.4
        if [ ! -f /usr/local/bin/mongod ];
        then
            printf "${FAIL}MongoDB Installation Failed${END}\n"
            exit_restart $STEP
        fi
    else
        printf "${PASS}Mongo Already installed${END}\n"
    fi
}

# Creates Default Database Files
create_files()
{
    if [ ! -e /data ];
    then
        printf "${HEAD}Creating Database Folders${END}\n"
        sudo mkdir -v -p /data/db
        sudo mkdir -v -p /data/logs
    fi
    # The original script had root remain the owner of these files but
    # that ended up causing some difficulties
    sudo chown -R $USER:$GROUP /data
    chmod -R -v 0755 /data
}


depend_crits()
{
    printf "${HEAD}Installing Python Dependencies${END}\n"
    sudo pip install -r requirements.txt
    printf "${INFO}Dependency installations complete!${END}\n"
}

# Creates CRITs username and password for administrator
server_setup()
{
    touch logs/crits.log
    chmod 0644 logs/crits.log

    if [ ! -f crits/config/database.py ]; then
        echo "Creating default database configuration file"
        cp crits/config/database_example.py crits/config/database.py
        SC=$(cat /dev/urandom | LC_CTYPE=C tr -dc 'abcdefghijklmnopqrstuvwxyz0123456789!@#%^&*(-_=+)' | fold -w 50 | head -n 1)
        # This is going to escape the '&' character that is a special character in sed 
        SE=$(echo ${SC} | sed -e 's/\\/\\\\/g' | sed -e 's/\//\\\//g' | sed -e 's/&/\\\&/g')
        sed -i -e "s/^\(SECRET_KEY = \).*$/\1\'${SE}\'/1" crits/config/database.py
    else
        echo "Database configuration file exists, skip secret_key generation!"
    fi

    pgrep mongod >/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        printf "${INFO}Starting Mongod${END}\n"
        sh contrib/mongo/mongod_start.sh
    fi

    python manage.py create_default_collections
    if [ $? -eq 0 ]
    then
        read -p "Username: " USERNAME
        read -p  "First name: " FIRSTNAME
        read -p "Last name: " LASTNAME
        read -p "Email address: " EMAIL
        read -p "Organization name: " ORG

        python manage.py users -a -A -e "$EMAIL" -f "$FIRSTNAME" -l "$LASTNAME" -o "$ORG" -u "$USERNAME"

        printf "${FAIL}This is Your Temp Password${END}\n"
    fi
}

# Starts up everything needed to run the server
# Checks if mongodb is running, starts it if not and then
# starts the server
run_server()
{
    printf "${HEAD}Starting Server${END}\n"
    printf "${INFO}To Restart Server: script/bootstrap 4\n"
    printf "Warning MongoDB Will Still be Running After Server Ends${END}\n"

    pgrep mongod >/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        sh contrib/mongo/mongod_start.sh
    fi

    printf "\nRunning Server on 0.0.0.0 Port 8080\n"
    python manage.py runserver 0.0.0.0:8080
}

# Error Message
exit_restart()
{
    printf "\n${HEAD}Error: To restart at this step: sh $0 $1${END}\n"
    exit
}

ubuntu_install()
{
    printf "${INFO}Installing dependencies with apt-get${END}\n"
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
    sudo apt-add-repository universe
    sudo apt-get update
    sudo apt-get install -y --fix-missing build-essential curl git libevent-dev libz-dev libfuzzy-dev libldap2-dev libpcap-dev libpcre3-dev libsasl2-dev libxml2-dev libxslt1-dev libyaml-dev mongodb-org numactl p7zip-full python-dev python-pip ssdeep upx zip swig libssl-dev
    sudo ldconfig
}

darwin_install()
{
    command -v brew >/dev/null 2>&1 || {
    printf "${FAIL}Installation for OSX requires Homebrew. Please visit http://brew.sh/.${END}\n"
    exit
    }
    brew install mongodb ssdeep upx p7zip libyaml pcre libxml2 openssl
    brew install https://raw.githubusercontent.com/destijl/homebrew-versions/master/swig304.rb
}

freebsd_install()
{
    printf "${PASS}Installing ports${END}\n"
    sudo pkg install mongodb ssdeep upx p7zip libyaml pcre libxml2 openssl swig py27-m2crypto py27-pydeep py27-ldap2 py27-mongoengine
}

red_hat_install()
{
    printf "${HEAD}Installing CRITs Dependencies${END}\n"

    REL=$(echo $VER | sed 's/\..//')
    
    if [ ! -f /etc/yum.repos.d/rpmforge.repo ];
    then
        printf "${INFO}Installing RPMForge repo${END}\n"
        sudo rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt
        sudo rpm -i http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el${REL}.rf.x86_64.rpm
    fi
    if [ ! -f /etc/yum.repos.d/epel.repo ];
    then
        printf "${INFO}Installing EPEL repo${END}\n"
        sudo yum -y install epel-release
    fi

    if [ ! -f /etc/yum.repos.d/epel.repo ];
    then
        printf "${INFO}Installing IUS repo${END}\n"
        # python27 comes from here
        sudo yum -y install ius-release
    fi
    
    printf "${INFO}Installing Packages${END}\n"
    sudo yum -y install python27 python27-pip
    sudo yum -y install make gcc gcc-c++ kernel-devel git openldap-devel pcre pcre-devel curl libpcap-devel python-devel python-pip libxml2-devel libxslt-devel libyaml-devel numactl ssdeep ssdeep-devel openssl-devel zip unzip gzip bzip2 swig
    sudo yum -y install p7zip p7zip-plugins
    sudo yum -y install unrar libffi-devel
    sudo yum -y install libyaml
    sudo yum -y install upx

    printf "${INFO}Dependency Install Complete${END}\n"
}

#===============================================================
# This is the Beginning of the Script
#===============================================================
# Sees if there is an argument
if [ -z $1 ];
then
    STEP=1
else
    STEP=$1
fi

while [ $STEP -lt 6 ]
do
    case $STEP in
        1)
            verify
            if [ "$OS" = 'ubuntu' ]
            then
                printf "${PASS}ubuntu is Supported!${END}\n"
                ubuntu_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = 'darwin' ]
            then
                printf "${PASS}OS X is Supported!${END}\n"
                darwin_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = "centos" ]
            then
                printf "${PASS}CentOS is Supported!${END}\n"
                red_hat_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = "red hat" ]
            then
                printf "${PASS}Red Hat is Supported!${END}\n"
                red_hat_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = 'freebsd' ]
            then
                printf "${PASS}FreeBSD is Supported${END}\n"
                freebsd_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            else
                printf "${FAIL}OS: $OS, need Ubuntu, Darwin (OS X), CentOS, Red Hat, or FreeBSD${END}\n"
                exit
            fi
            ;;
        2)
            install_mongo ||exit_restart $STEP ;;
        3)
            create_files ||exit_restart $STEP ;;
        4)
            server_setup ||exit_restart $STEP ;;
        5)
            run_server ||exit_restart $STEP ;;
        *)
            exit
            ;;
    esac
    STEP=$((STEP+1))
done
