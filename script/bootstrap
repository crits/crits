#!/bin/sh
# (c) 2015, The MITRE Corporation. All rights reserved.
# Source code distributed pursuant to license agreement.
#
# Usage: script/bootstrap
# This script is designed to install all of the necessary dependencies for a
# CRITs install, walk through some basic setup, and help you start a quick
# instance of CRITs.

#=====================Message Colors=========================
FAIL=$(tput setaf 1) #red
PASS=$(tput setaf 2) #green
HEAD=$(tput setaf 5) #magenta
INFO=$(tput setaf 6) #cyan
END=$(tput sgr0)   #ends color
#============================================================

verify()
{
    printf "${INFO}Testing Computer's Architecture${END}\n"
    ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
    if [ "$ARCH" = "64" ];
    then
        printf "${PASS}Architecure 64bit Passed${END}\n"
    else
        printf "${FAIL}Your Architecure: $ARCH, need 64${END}\n"
        exit
    fi
    printf "${INFO}Testing Linux Distribution${END}\n"
    # Using lsb-release because os-release not available on Ubuntu 10.04
    if [ -f /etc/redhat-release ];
    then
        OS=$(cat /etc/redhat-release)
        if [[ "$OS" != *"CentOS"* ]];
        then
            OS=$(cat /etc/redhat-release | sed 's/ Enterprise.*//')
        else
            OS="CentOS"
        fi
        VER=$(cat /etc/redhat-release | sed 's/.*release //;s/ .*$//')
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        OS=$DISTRIB_ID
        VER=$DISTRIB_RELEASE
    else
        OS=$(uname -s)
        VER=$(uname -r)
    fi
    OS="$(echo "$OS" | tr "[:upper:]" "[:lower:]")"
    VER="$(echo "$VER" | tr "[:upper:]" "[:lower:]")"
}

# Creates Default Database Files
create_files()
{
    if [ ! -e /data ];
    then
        printf "${HEAD}Creating Database Folders${END}\n"
        sudo mkdir -v -p /data/db
        sudo mkdir -v -p /data/logs
    fi
    # The original script had root remain the owner of these files but
    # that ended up causing some difficulties
    sudo chown -R $USER:$GROUP /data
    chmod -R -v 0755 /data
}

depend_crits()
{
    printf "${HEAD}Installing Python Dependencies${END}\n"
    sudo pip install -r requirements.txt
    printf "${INFO}Dependency installations complete!${END}\n"
}

# Creates CRITs username and password for administrator
server_setup()
{
    touch logs/crits.log
    chmod 0644 logs/crits.log
    cp crits/config/database_example.py crits/config/database.py
    SC="$(python contrib/gen_secret_key.py)"
    sed -i'' -e "s/.*SECRET_KEY.*/SECRET_KEY = \'"$SC"\'/" crits/config/database.py

    pgrep mongod >/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        printf "${INFO}Starting Mongod${END}\n"
        sh contrib/mongo/mongod_start.sh
    fi

    python manage.py create_default_collections
    if [ $? -eq 0 ]
    then
        read -p "Username: " USERNAME
        read -p  "First name: " FIRSTNAME
        read -p "Last name: " LASTNAME
        read -p "Email address: " EMAIL
        read -p "Organization name: " ORG

        python manage.py users -a -A -e "$EMAIL" -f "$FIRSTNAME" -l "$LASTNAME" -o     "$ORG" -u "$USERNAME"

        printf "${FAIL}This is Your Temp Password${END}\n"
    fi
}

# Starts up everything needed to run the server
# Checks if mongodb is running, starts it if not and then
# starts the server
run_server()
{
    printf "${HEAD}Starting Server${END}\n"
    printf "${INFO}To Restart Server: script/bootstrap 4\n"
    printf "Warning MongoDB Will Still be Running After Server Ends${END}\n"

    pgrep mongod >/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        sh contrib/mongo/mongod_start.sh
    fi

    printf "\nRunning Server on 0.0.0.0 Port 8080\n"
    python manage.py runserver 0.0.0.0:8080
}

# Error Message
exit_restart()
{
    printf "\n${HEAD}Error: To restart at this step: sh $0 $1${END}\n"
    exit
}

# Gets python 2.7 for CentOS, default is 2.6, while leaving system python intact
get_python()
{
    printf "${INFO}Installing Python 2.7.9${END}\n"
    sudo yum -y update
    sudo yum -y groupinstall "Development tools"
    sudo yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel php-ldap
    sudo yum -y install xz-libs
    #Download Tarball and Install Python
    if [[ $(python --version 2>&1) == "Python 2.7.9" ]];
    then
        printf "${PASS}Python 2.7.9 Already Installed${END}\n"
    else
        #To return to working directory
        LOCATION=$(pwd)

        wget http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz
        tar -xzf Python-2.7.9.tgz

        cd Python-2.7.9
        ./configure --prefix=/usr/local --enable-unicode=ucs4 --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
        sudo make && sudo make altinstall
        cd ..
        sudo rm -rf Python-2.7.9.tgz
        sudo rm -rf Python-2.7.9
        # Add Python To Path
        cd /usr/local/bin
        sudo ln -s python2 python
        sudo ln -s python2.7 python2
        cd $LOCATION
    fi
}

# Install pip, a needed installation tool
get_pip()
{
    printf "${INFO}Getting Pip!${END}\n"
    #This can be done with sudo /usr/local/bin/easy_install pip
    wget https://raw.githubusercontent.com/pypa/pip/master/contrib/get-pip.py
    sudo /usr/local/bin/python2.7 get-pip.py
    rm -f get-pip.py
    if [ -f /usr/local/bin/pip ];
    then
        printf "${PASS}Pip Successfully Installed!${END}\n"
    else
        printf "${FAIL}Pip Could not Be Installed! Exiting${END}\n"
        exit_restart
    fi
}

ubuntu_install()
{
    printf "${INFO}Installing dependencies with apt-get${END}\n"
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
    echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list

    sudo apt-get update
    sudo apt-get install -y --fix-missing build-essential curl git libevent-dev libz-dev libfuzzy-dev libldap2-dev libpcap-dev libpcre3-dev libsasl2-dev libxml2-dev libxslt1-dev libyaml-dev mongodb-org numactl p7zip-full python-dev python-pip ssdeep upx zip swig libssl-dev
    sudo ldconfig
}

darwin_install()
{
    command -v brew >/dev/null 2>&1 || {
    printf "${FAIL}Installation for OSX requires Homebrew. Please visit http://brew.sh/.${END}\n"
    exit
    }
    brew install mongodb ssdeep upx p7zip libyaml pcre libxml2 openssl
    brew install https://raw.githubusercontent.com/destijl/homebrew-versions/master/swig304.rb
}

red_hat_install()
{
    printf "${INFO}Installing Yum Packages${END}\n"
    # Probably should run the Yum equivelent of apt-get update
    sudo yum install make gcc gcc-c++ kernel-devel pcre pcre-devel curl libpcap-devel python-devel python-pip zip unzip gzip bzip2 swig
    sudo yum install p7zip-9.20.1-2
    sudo yum install unrar-4.2.3-1
    sudo yum install libyaml-0.1.4-1
    sudo yum install upx-3.07-1
}

centos_install()
{
    # Verify Script is not being run as root, causes issues with python
    if [ $EUID == 0 ];
    then
        printf "${FAIL}Do Not Run This Script As Root!${END}\n"
        exit
    fi
    get_python

    printf "${HEAD}Installing CRITs Dependencies${END}\n"

    if [ ! -f /etc/yum.repos.d/rpmforge.repo ];
    then
        printf "${INFO}Downloading rpmforge.repo${END}\n"
        wget http://apt.sw.be/redhat/el6/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
        sudo rpm -i rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
        rm rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
    fi
    if [ ! -f /etc/yum.repos.d/epel.repo ];
    then
        printf "${INFO}Installing epel.repo${END}\n"
        sudo yum -y install epel-release
    fi


    if [ -f /usr/local/bin/pip ]; then
        printf "${PASS}Pip Already Installed${END}\n"
    else
        get_pip
    fi
    #lxml Dependencies
    sudo env "PATH=$PATH" yum -y install python-devel libxml2-devel libxslt-devel
    sudo /usr/local/bin/pip install lxml python-magic olefile

    sudo env "PATH=$PATH" yum -y install make gcc gcc-c++ kernel-devel pcre pcre-devel curl libpcap-devel  zip unzip gzip bzip2 swig
    sudo env "PATH=$PATH" yum -y install p7zip
    sudo env "PATH=$PATH" yum -y install unrar libffi-devel
    sudo env "PATH=$PATH" yum -y install libyaml
    sudo env "PATH=$PATH" yum -y install upx
    sudo env "PATH=$PATH" yum -y install openldap-devel
    sudo /usr/local/bin/pip install python-ldap
    #	sudo env "PATH=$PATH" yum -y install ssdeep
    # Check if Mongo is Installed
    if [ ! -f /usr/local/bin/mongod ];
    then
        printf "${INFO}Installing MongoDB${END}\n"
        curl http://downloads.mongodb.org/linux/mongodb-linux-x86_64-2.6.4.tgz > mongodb-linux-x86_64-2.6.4.tgz
        tar -zxvf mongodb-linux-x86_64-2.6.4.tgz
        sudo cp ./mongodb-linux-x86_64-2.6.4/bin/* /usr/local/bin/
        rm  mongodb-linux-x86_64-2.6.4.tgz
        rm -r mongodb-linux-x86_64-2.6.4
        if [ ! -f /usr/local/bin/mongod ];
        then
            printf "${FAIL}MongoDB Installation Failed${END}\n"
            exit_restart $STEP
        fi
    else
        printf "${PASS}Mongo Already installed${END}\n"
    fi
    printf "${INFO}Installing Python Dependencies${END}\n"
    printf "${FAIL}\t\t\tWarning: Hardcoded crits/requirements${END}\n"
    # crits/requirements.txt was giving some problems with pydeep the original was:
    # sudo /usr/local/bin/pip install -r requirements.txt
    # They are repeats but this section is the hard coded version of crits/requirements.txt except for pydeep
    sudo /usr/local/bin/pip install Django==1.6.11 Pillow amqp anyjson billiard biplist celery cybox==2.1.0.11 defusedxml
    sudo /usr/local/bin/pip install django-celery django-tastypie==0.11.0 django-tastypie-mongoengine==0.4.5
    sudo /usr/local/bin/pip install kombu lxml m2crypto mongoengine==0.8.8 pydot pymongo==2.7.2 pyparsing
    sudo /usr/local/bin/pip install python-dateutil python-ldap python-magic==0.4.6 python-mimeparse pytz pyyaml
    sudo /usr/local/bin/pip install requests setuptools simplejson
    sudo /usr/local/bin/pip install six stix==1.1.1.0 ushlex wsgiref

    #Pydeep Installation-github.com/kblanda/pydeep/blob/master/INSTALL
    # ssdeep installation
    printf "${INFO}Installing ssdeep and pydeep${END}\n"
    wget http://sourceforge.net/projects/ssdeep/files/ssdeep-2.13/ssdeep-2.13.tar.gz
    tar -vxzf ssdeep-2.13.tar.gz
    cd ssdeep-2.13
    ./bootstrap
    ./configure
    make
    sudo env "PATH=$PATH" make install
    # pydeep installation
    cd ..
    sudo /usr/local/bin/pip install pydeep
    rm ssdeep-2.13.tar.gz
    rm -rf ssdeep-2.13
    printf "${INFO}Dependency Install Complete${END}\n"
}

#===============================================================
# This is the Beginning of the Script
#===============================================================
# Sees if there is an argument
if [ -z $1 ];
then
    STEP=1
else
    STEP=$1
fi

while [ $STEP -lt 5 ]
do
    case $STEP in
        1)
            verify
            if [ "$OS" = 'ubuntu' ]
            then
                printf "${PASS}ubuntu is Supported!${END}\n"
                ubuntu_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = 'darwin' ]
            then
                printf "${PASS}OS X is Supported!${END}\n"
                darwin_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            elif [ "$OS" = "centos" ]
            then
                printf "${PASS}CentOS is Supported!${END}\n"
                centos_install || exit_restart $STEP
            elif [ "$OS" = "red hat" ]
            then
                printf "${PASS}Red Hat is Supported!${END}\n"
                red_hat_install || exit_restart $STEP
                depend_crits ||exit_restart $STEP
            else
                printf "${FAIL}OS: $OS, need CentOS, Darwin, Red Hat, or Ubuntu${END}\n"
                exit
            fi
            ;;
        2)
            create_files ||exit_restart $STEP ;;
        3)
            server_setup ||exit_restart $STEP ;;
        4)
            run_server ||exit_restart $STEP ;;
        *)
            exit
            ;;
    esac
    STEP=$((STEP+1))
done
