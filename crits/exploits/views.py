import json

from django.contrib.auth.decorators import user_passes_test
try:
    from django.urls import reverse
except ImportError:
    from django.core.urlresolvers import reverse
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render

from crits.exploits.forms import AddExploitForm
from crits.exploits.handlers import add_new_exploit, get_exploit_details
from crits.exploits.handlers import exploit_remove, set_exploit_name
from crits.exploits.handlers import update_exploit_cve
from crits.exploits.handlers import generate_exploit_csv
from crits.exploits.handlers import generate_exploit_jtable
from crits.core import form_consts
from crits.core.data_tools import json_handler
from crits.core.user_tools import user_can_view_data

from crits.vocabulary.acls import ExploitACL


@user_passes_test(user_can_view_data)
def exploits_listing(request,option=None):
    """
    Generate the Exploit listing page.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :param option: Action to take.
    :type option: str of either 'jtlist', 'jtdelete', 'csv', or 'inline'.
    :returns: :class:`django.http.HttpResponse`
    """

    user = request.user
    if user.has_access_to(ExploitACL.READ):
        if option == "csv":
            return generate_exploit_csv(request)
        return generate_exploit_jtable(request, option)
    else:
        return render(request, "error.html",
                                  {'error': 'User does not have permission to view Exploit listing.'})

@user_passes_test(user_can_view_data)
def exploit_detail(request, id_):
    """
    Generate the Exploit details page.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :param id_: The Exploit ObjectId to get details for.
    :type id_: str
    :returns: :class:`django.http.HttpResponse`
    """

    request.user._setup()

    user = request.user
    if user.has_access_to(ExploitACL.READ):
        template = "exploit_detail.html"
        (new_template, args) = get_exploit_details(id_, user)
        if new_template:
            template = new_template
        return render(request, template,
                                  args)
    else:
        return render(request, "error.html",
                                  {'error': 'User does not have permission to view Exploit details.'})

@user_passes_test(user_can_view_data)
def add_exploit(request):
    """
    Add a exploit. Should be an AJAX POST.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :returns: :class:`django.http.HttpResponse`
    """

    if request.method == "POST" and request.is_ajax():
        data = request.POST
        form = AddExploitForm(request.user, data)
        if form.is_valid():
            cleaned_data = form.cleaned_data
            name = cleaned_data['name']
            cve = cleaned_data['cve']
            description = cleaned_data['description']
            source = cleaned_data['source_name']
            reference = cleaned_data['source_reference']
            method = cleaned_data['source_method']
            tlp = cleaned_data['source_tlp']
            campaign = cleaned_data['campaign']
            confidence = cleaned_data['confidence']
            user = request.user
            bucket_list = cleaned_data.get(form_consts.Common.BUCKET_LIST_VARIABLE_NAME)
            ticket = cleaned_data.get(form_consts.Common.TICKET_VARIABLE_NAME)
            related_id = cleaned_data['related_id']
            related_type = cleaned_data['related_type']
            relationship_type = cleaned_data['relationship_type']

            result = add_new_exploit(name,
                                     cve=cve,
                                     description=description,
                                     source=source,
                                     source_method=method,
                                     source_reference=reference,
                                     source_tlp=tlp,
                                     campaign=campaign,
                                     confidence=confidence,
                                     user=user,
                                     bucket_list=bucket_list,
                                     ticket=ticket,
                                     related_id=related_id,
                                     related_type=related_type,
                                     relationship_type=relationship_type)

            return HttpResponse(json.dumps(result, default=json_handler),
                                content_type="application/json")
        return HttpResponse(json.dumps({'success': False,
                                        'form':form.as_table()}),
                            content_type="application/json")
    return render(request, "error.html", {'error': 'Expected AJAX/POST'})

@user_passes_test(user_can_view_data)
def remove_exploit(request, id_):
    """
    Remove a Exploit.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :param id_: The ObjectId of the Exploit to remove.
    :type id_: str
    :returns: :class:`django.http.HttpResponse`
    """

    if request.method == "POST":
        exploit_remove(id_, request.user.username)
        return HttpResponseRedirect(reverse('crits-exploits-views-exploits_listing'))
    return render(request, 'error.html',
                              {'error':'Expected AJAX/POST'})

@user_passes_test(user_can_view_data)
def edit_exploit_name(request, id_):
    """
    Set exploit name. Should be an AJAX POST.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :param id_: The ObjectId of the Exploit.
    :type id_: str
    :returns: :class:`django.http.HttpResponseRedirect`
    """

    if request.method == "POST" and request.is_ajax():
        user = request.user.username
        name = request.POST.get('name', None)
        if not name:
            return HttpResponse(json.dumps({'success': False,
                                            'message': 'Not all info provided.'}),
                                content_type="application/json")
        result = set_exploit_name(id_,
                                   name,
                                   user)
        return HttpResponse(json.dumps(result),
                            content_type="application/json")
    else:
        error = "Expected AJAX POST"
        return render(request, "error.html", {"error" : error })

@user_passes_test(user_can_view_data)
def edit_exploit_cve(request):
    """
    Update CVE for a Exploit.

    :param request: Django request.
    :type request: :class:`django.http.HttpRequest`
    :returns: :class:`django.http.HttpResponseRedirect`
    """

    if request.method == "POST" and request.is_ajax():
        cve = request.POST.get('cve', None)
        id_ = request.POST.get('oid', None)
        user = request.user.username
        result = update_exploit_cve(id_, cve, user)
        return HttpResponse(json.dumps(result),
                            content_type="application/json")
    else:
        error = "Expected AJAX POST"
        return render(request, "error.html", {"error" : error })
